using UnityEngine;
using System.Collections.Generic;
using CW.Common;

namespace PaintIn3D
{
	/// <summary>This class allows you to easily create components that can have their paint lines connected together to form quads.</summary>
	[System.Serializable]
	public class P3dLineConnector
	{
		class Link
		{
			public object  Owner;
			public Vector3 Position;
			public Vector3 EndPosition;
			public float   Age;
			public bool    Preview;
		}

		/// <summary>The world space distance between each paint point.
		/// 0 = No spacing.</summary>
		public float HitSpacing { set { hitSpacing = value; } get { return hitSpacing; } } [SerializeField] private float hitSpacing;

		/// <summary>When using <b>HitSpacing</b>, this prevents scenarios where something goes wrong and you attempt to paint too many times per frame.</summary>
		public int HitLimit { set { hitLimit = value; } get { return hitLimit; } } [SerializeField] private int hitLimit = 30;

		/// <summary>If you enable this then the hit lines generated by this component will be connected into quads, allowing you to paint continuously.</summary>
		public bool ConnectHits { set { connectHits = value; } get { return connectHits; } } [SerializeField] protected bool connectHits;

		/// <summary>If you enable <b>ConnectHits</b>, then each connected quad will overlap with the next. When using semi-transparent painting, this causes the overlap to become double opacity and look obvious. If you enable this setting, then this overlapping area will be removed.</summary>
		public bool ClipConnected { set { clipConnected = value; } get { return clipConnected; } } [SerializeField] protected bool clipConnected;

		[System.NonSerialized]
		private List<Link> links = new List<Link>();

		[System.NonSerialized]
		private static Stack<Link> linkPool = new Stack<Link>();

		[System.NonSerialized]
		protected P3dHitCache hitCache = new P3dHitCache();

		public P3dHitCache HitCache
		{
			get
			{
				return hitCache;
			}
		}

		/// <summary>This component sends hit events to a cached list of components that can receive them. If this list changes then you must manually call this method.</summary>
		public void ClearHitCache()
		{
			hitCache.Clear();
		}

		/// <summary>If this GameObject has teleported and you have <b>ConnectHits</b> or <b>HitSpacing</b> enabled, then you can call this to prevent a quad being drawn between the previous and current lines.</summary>
		public void ResetConnections()
		{
			for (var i = links.Count - 1; i >= 0; i--)
			{
				linkPool.Push(links[i]);
			}

			links.Clear();
		}

		public void BreakHits(object owner)
		{
			for (var i = links.Count - 1; i >= 0; i--)
			{
				var link = links[i];

				if (link.Owner == owner)
				{
					links.RemoveAt(i);

					linkPool.Push(link);

					return;
				}
			}
		}

		public void SubmitLine(GameObject gameObject, bool preview, int priority, float pressure, Vector3 position, Vector3 endPosition, Quaternion rotation, object owner)
		{
			if (owner != null)
			{
				var link = default(Link);

				if (TryGetLink(owner, ref link) == true)
				{
					if (link.Preview == preview)
					{
						if (hitSpacing > 0.0f)
						{
							var currentPositionA = link.Position;
							var currentPositionB = link.EndPosition;
							var distanceA        = Vector3.Distance(link.Position, position);
							var distanceB        = Vector3.Distance(link.EndPosition, endPosition);
							var stepsA           = Mathf.FloorToInt(distanceA / hitSpacing);
							var stepsB           = Mathf.FloorToInt(distanceB / hitSpacing);

							if (stepsA > 0 || stepsB > 0)
							{
								var steps       = Mathf.Max(stepsA, stepsB);
								var hitSpacingA = hitSpacing;
								var hitSpacingB = hitSpacing;

								if (steps > hitLimit)
								{
									steps = hitLimit;
								}

								if (stepsA > stepsB)
								{
									hitSpacingB = (distanceB * (distanceA / (stepsA * hitSpacingA))) / stepsA;
								}
								else
								{
									hitSpacingA = (distanceA * (distanceB / (stepsB * hitSpacingB))) / stepsB;
								}

								for (var i = 0; i < steps; i++)
								{
									currentPositionA = Vector3.MoveTowards(currentPositionA, position, hitSpacingA);
									currentPositionB = Vector3.MoveTowards(currentPositionB, endPosition, hitSpacingB);

									if (connectHits == true)
									{
										hitCache.InvokeQuad(gameObject, preview, priority, pressure, link.Position, link.EndPosition, currentPositionA, currentPositionB, rotation, clipConnected && !preview);
									}
									else
									{
										hitCache.InvokeLine(gameObject, preview, priority, pressure, currentPositionA, currentPositionB, rotation, false);
									}

									link.Position    = currentPositionA;
									link.EndPosition = currentPositionB;
								}
							}

							return;
						}
						else if (connectHits == true)
						{
							hitCache.InvokeQuad(gameObject, preview, priority, pressure, link.Position, link.EndPosition, position, endPosition, rotation, clipConnected && !preview);
						}
						else
						{
							hitCache.InvokeLine(gameObject, preview, priority, pressure, position, endPosition, rotation, false);
						}
					}
					else
					{
						hitCache.InvokeLine(gameObject, preview, priority, pressure, position, endPosition, rotation, false);
					}
				}
				else
				{
					link = linkPool.Count > 0 ? linkPool.Pop() : new Link();

					link.Owner = owner;

					links.Add(link);

					hitCache.InvokeLine(gameObject, preview, priority, pressure, position, endPosition, rotation, false);
				}

				link.Position    = position;
				link.EndPosition = endPosition;
				link.Preview     = preview;
			}
			else
			{
				hitCache.InvokeLine(gameObject, preview, priority, pressure, position, endPosition, rotation, false);
			}
		}

		public void Update()
		{
			for (var i = links.Count - 1; i >= 0; i--)
			{
				var link = links[i];

				link.Age += Time.deltaTime;

				if (link.Age > 1.0f)
				{
					link.Age = 0.0f;

					links.RemoveAt(i);

					linkPool.Push(link);
				}
			}
		}

		private bool TryGetLink(object owner, ref Link link)
		{
			for (var i = links.Count - 1; i >= 0; i--)
			{
				link = links[i];

				link.Age = 0.0f;

				if (link.Owner == owner)
				{
					return true;
				}
			}

			return false;
		}
	}
}

#if UNITY_EDITOR
namespace PaintIn3D
{
	using UnityEditor;

	public static class P3dLineConnector_Editor
	{
		public static void Draw()
		{
			CwEditor.Draw("connector.hitSpacing", "The world space distance between each paint point.\n\n0 = No spacing.");
			CwEditor.Draw("connector.hitLimit", "When using HitSpacing, this prevents scenarios where something goes wrong and you attempt to paint too many times per frame.");
			CwEditor.Draw("connector.connectHits", "If you enable this then the hit lines generated by this component will be connected into quads, allowing you to paint continuously.");
			CwEditor.Draw("connector.clipConnected", "If you enable <b>ConnectHits</b>, then each connected quad will overlap with the next. When using semi-transparent painting, this causes the overlap to become double opacity and look obvious. If you enable this setting, then this overlapping area will be removed.");
		}
	}
}
#endif